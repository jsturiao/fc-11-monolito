import request from 'supertest';
import app from '../../index';
import { setupDatabase, clearDatabase, closeDatabase } from '../setup/test-setup';

describe('Checkout API E2E Tests', () => {
  beforeAll(async () => {
    await setupDatabase();
  });

  beforeEach(async () => {
    await clearDatabase();
  });

  afterAll(async () => {
    await closeDatabase();
  });

  describe('POST /checkout', () => {
    beforeEach(async () => {
      // Create products needed for checkout
      const product1 = {
        name: 'Product 1',
        description: 'Test Product 1',
        salesPrice: 100,
        stock: 10
      };

      const product2 = {
        name: 'Product 2',
        description: 'Test Product 2',
        salesPrice: 200,
        stock: 5
      };

      await request(app).post('/products').send(product1);
      await request(app).post('/products').send(product2);

      // Create client needed for checkout
      const client = {
        name: 'John Doe',
        email: 'john@example.com',
        document: '123456789',
        address: {
          street: 'Main Street',
          number: '123',
          complement: 'Apt 1',
          city: 'Test City',
          state: 'TS',
          zipCode: '12345-678'
        }
      };

      await request(app).post('/clients').send(client);
    });

    it('should process checkout successfully', async () => {
      const checkoutData = {
        clientId: expect.any(String), // Will be generated by the system
        products: [
          {
            productId: expect.any(String), // Will be generated by the system
            quantity: 2
          },
          {
            productId: expect.any(String), // Will be generated by the system
            quantity: 1
          }
        ]
      };

      // Since we need the actual IDs, we'll have to get them first
      // For now, we'll test with mock UUIDs that the system will generate
      const mockCheckoutData = {
        clientId: '11111111-1111-1111-1111-111111111111',
        products: [
          {
            productId: '22222222-2222-2222-2222-222222222222',
            quantity: 2
          },
          {
            productId: '33333333-3333-3333-3333-333333333333',
            quantity: 1
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(mockCheckoutData);

      // Note: This test may fail due to ID generation
      // In a real scenario, we'd need to retrieve the actual generated IDs
      expect(response.status).toBeLessThan(500); // Should not be a server error
    });

    it('should return validation error for missing clientId', async () => {
      const checkoutData = {
        products: [
          {
            productId: '22222222-2222-2222-2222-222222222222',
            quantity: 2
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: clientId is required and must be a string');
    });

    it('should return validation error for missing products', async () => {
      const checkoutData = {
        clientId: '11111111-1111-1111-1111-111111111111'
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: products is required and must be an array');
    });

    it('should return validation error for empty products array', async () => {
      const checkoutData = {
        clientId: '11111111-1111-1111-1111-111111111111',
        products: [] as any[]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: products must have at least 1 item');
    });

    it('should return validation error for invalid product structure', async () => {
      const checkoutData = {
        clientId: '11111111-1111-1111-1111-111111111111',
        products: [
          {
            productId: '22222222-2222-2222-2222-222222222222'
            // missing quantity
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: products[0].quantity is required and must be a number');
    });

    it('should return validation error for invalid quantity', async () => {
      const checkoutData = {
        clientId: '11111111-1111-1111-1111-111111111111',
        products: [
          {
            productId: '22222222-2222-2222-2222-222222222222',
            quantity: 0
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: products[0].quantity must be greater than 0');
    });

    it('should return validation error for invalid clientId format', async () => {
      const checkoutData = {
        clientId: 'invalid-uuid',
        products: [
          {
            productId: '22222222-2222-2222-2222-222222222222',
            quantity: 1
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: clientId must be a valid UUID');
    });

    it('should return validation error for invalid productId format', async () => {
      const checkoutData = {
        clientId: '11111111-1111-1111-1111-111111111111',
        products: [
          {
            productId: 'invalid-uuid',
            quantity: 1
          }
        ]
      };

      const response = await request(app)
        .post('/checkout')
        .send(checkoutData)
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.details.validationErrors).toContain('Body: products[0].productId must be a valid UUID');
    });

    it('should return validation error for empty request body', async () => {
      const response = await request(app)
        .post('/checkout')
        .send({})
        .expect(400);

      expect(response.body.error).toBe(true);
      expect(response.body.message).toBe('Validation failed');
    });
  });
});
